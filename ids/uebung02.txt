IDS - Uebung 2 - David Herrmann

Aufgabe 5:
		lw r1, 0x1000 (r0)
		lw r2, 0x1004 (r0)
	loop:	beqz r1, end
		slt r3, r1, r2
		bnez r3, branch
		sub r3, r1, r2
		add r1, r2, r0
		add r2, r3, r0
		j loop
	branch:	sub r3, r2, r1
		add r2, r1, r0
		add r1, r3, r0
		j loop
	end:	sw 0x1008 (r0), r2

	lw r1, 0x1000 (r0)
	=> lw     r0    r1    0x1000
	=> 100011 00000 00001 0001 0000 0000 0000
	=> 10001100000000010001000000000000

	lw r2, 0x1004 (r0)
	=> lw     r0    r2    0x1004
	=> 100011 00000 00010 0001 0000 0000 0100
	=> 10001100000000100001000000000100

	beqz r1, end
	=> beqz   r1          end
	=> 000100 00001 00000 dez(10 * 4)
	=> 000100 00001 00000 0000 0000 0010 1000
	=> 00010000001000000000000000001010

	slt r3, r1, r2
	=> slt    r1    r2    r3
	=> 000000 00001 00010 00011 00000 101010
	=> 00000000001000100001100000101010

	bnez r3, branch
	=> bnez   r3          branch
	=> 000101 00011 00000 dez(4 * 4)
	=> 000101 00011 00000 0000 0000 0001 0000
	=> 00010100011000000000000000000100

	sub r3, r1, r2
	=> sub    r1    r2    r3
	=> 000000 00001 00010 00011 00000 100010
	=> 00000000001000100001100000100010

	add r1, r2, r0
	=> add    r2    r0    r1
	=> 000000 00010 00000 00001 00000 100000
	=> 00000000010000000000100000100000

	add r2, r3, r0
	=> add    r3    r0    r2
	=> 000000 00011 00000 00010 00000 100000
	=> 00000000011000000001000000100000

	j loop
	=> j      loop
	=> 000010 dez(7 * 4)
	=> 000010 00 0000 0000 0000 0000 0001 1100
	=> 00001000000000000000000000011100

	sub r3, r2, r1
	=> sub    r2    r1    r3
	=> 000000 00010 00001 00011 00000 100010
	=> 00000000010000010001100000100010

	add r2, r1, r0
	=> add    r1    r0    r2
	=> 000000 00001 00000 00010 00000 100000
	=> 00000000001000000001000000100000

	add r1, r3, r0
	=> add    r3    r0    r1
	=> 000000 00011 00000 00001 00000 100000
	=> 00000000011000000000100000100000

	j loop
	=> j      loop
	=> 000010 dez(11 * 4)
	=> 000010 00 0000 0000 0000 0000 0010 1100
	=> 00001000000000000000000000101100

	sw 0x1008 (r0), r2
	=> sw     r0    r2    0x1008
	=> 101011 00000 00010 hex(0x1008)
	=> 101011 00000 00010 0001 0000 0000 1000
	=> 10101100000000100001000000001000

	Ohne Zwischenschritte:
		10001100000000010001000000000000  0x8C011000
		10001100000000100001000000000100  0x8C021004
		00010000001000000000000000001010  0x1020000A
		00000000001000100001100000101010  0x0022182A
		00010100011000000000000000000100  0x14600004
		00000000001000100001100000100010  0x00221822
		00000000010000000000100000100000  0x00400820
		00000000011000000001000000100000  0x00601020
		00001000000000000000000000011100  0x0800001C
		00000000010000010001100000100010  0x00411822
		00000000001000000001000000100000  0x00201020
		00000000011000000000100000100000  0x00600820
		00001000000000000000000000101100  0x0800002C
		10101100000000100001000000001000  0xAC021008

Aufgabe 6:
	10001100000000010001000000000000
	00000000001000000001000000100000
	00100000000000110000000000000001
	00010000010000000000000000001100
	00000000010000110001100000011001
	00101000010000100000000000000001
	00001011111111111111111111110000
	10101100000000110001000000000100

	100011 00000 00001 0001 0000 0000 0000
	=> lw  r0    r1    0x1000
	=> lw r1, 0x1000 (r0)

	000000 00001 00000 00010 00000 100000
	=> add r1    r0    r2
	=> add r2, r1, r0

	001000 00000 00011 0000000000000001
	=> addi r0   r3    0x01
	=> addi r3, r0, 0x01

	000100 00010 00000 0000000000001100
	=> beqz r2         0x0C
	=> beqz r2, 0x0C

	000000 00010 00011 00011 00000 011001
	=> multu r2  r3    r3
	=> multu r3, r2, r3

	001010 00010 00010 0000000000000001
	=> subi r2   r2    0x01
	=> subi r2, r2, 0x01

	000010 11111111111111111111110000
	=> j dez(-16)
	=> j -0xf0

	101011 00000 00011 0001 0000 0000 0100
	=> sw  r0    r3    0x1004
	=> sw 0x1004 (r0), r3

	Ohne Zwischenschritte:
			lw r1, 0x1000 (r0)
			add r2, r1, r0
			addi r3, r0, 0x01
		loop:	beqz r2, out
			multu r3, r2, r3
			subi r2, r2, 0x01
			j loop
		out:	sw 0x1004 (r0), r3

	Dieser Code läd den integer an 0x1000 und berechnet
	davon die Fakultät und speichert das Ergebnis in
	0x1004.
